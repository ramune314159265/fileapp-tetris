export const run = () => {
    const font = new FontFace("pixelM", "url(data:application/octet-stream;base64,)")
    font.load().then(() => {
        document.fonts.add(font);
        const wrapper = document.createElement('div')
        wrapper.style.background = 'black'
        wrapper.style.width = '100dvw'
        wrapper.style.height = '100dvh'
        wrapper.style.position = 'fixed'
        wrapper.style.top = 0
        wrapper.style.left = 0
        wrapper.style.display = 'flex'
        wrapper.style.alignItems = 'center'
        wrapper.style.justifyContent = 'center'

        const close = () => {
            clearInterval(timer)
            document.body.removeEventListener('keydown', keyDownHandler)
            window.removeEventListener('gamepadconnected', gamepadHandler)
            wrapper.remove()
        }

        document.body.appendChild(wrapper)

        const mainCanvas = document.createElement('canvas')
        const ctx = mainCanvas.getContext('2d', { alpha: false })

        const blockSize = 30
        const blockPerWidth = 10
        const blockPerHeight = 21

        const width = ((4 + 1 + blockPerWidth + 1 + 4) * blockSize) * devicePixelRatio
        const height = 630 * devicePixelRatio

        mainCanvas.width = width
        mainCanvas.height = height
        const displayWidth = width / devicePixelRatio
        const displayHeight = height / devicePixelRatio
        mainCanvas.style.width = String(width / devicePixelRatio) + "px";
        mainCanvas.style.height = String(height / devicePixelRatio) + "px";

        ctx.scale(devicePixelRatio, devicePixelRatio)

        const minoStartPositionX = 3
        const minoStartPositionY = -4

        const minoShape = [
            {
                //I
                shapes: [
                    [
                        [1, 0], [1, 1], [1, 2], [1, 3]
                    ], [
                        [0, 3], [1, 3], [2, 3], [3, 3]
                    ], [
                        [1, 0], [1, 1], [1, 2], [1, 3]
                    ], [
                        [0, 3], [1, 3], [2, 3], [3, 3]
                    ]
                ],
                color: '#00b0f0',
            }, {
                //O
                shapes: [
                    [
                        [1, 2], [2, 2], [1, 3], [2, 3]
                    ], [
                        [1, 2], [2, 2], [1, 3], [2, 3]
                    ], [
                        [1, 2], [2, 2], [1, 3], [2, 3]
                    ], [
                        [1, 2], [2, 2], [1, 3], [2, 3]
                    ]
                ],
                color: '#ffff00'
            }, {
                //S
                shapes: [
                    [
                        [2, 2], [3, 2], [1, 3], [2, 3]
                    ], [
                        [1, 1], [1, 2], [2, 2], [2, 3]
                    ], [
                        [2, 2], [3, 2], [1, 3], [2, 3]
                    ], [
                        [1, 1], [1, 2], [2, 2], [2, 3]
                    ]
                ],
                color: '#92d050'
            }, {
                //Z
                shapes: [
                    [
                        [0, 2], [1, 2], [1, 3], [2, 3]
                    ], [
                        [2, 1], [1, 2], [2, 2], [1, 3]
                    ], [
                        [0, 2], [1, 2], [1, 3], [2, 3]
                    ], [
                        [2, 1], [1, 2], [2, 2], [1, 3]
                    ]
                ],
                color: '#ff0000'
            }, {
                //J
                shapes: [
                    [
                        [2, 1], [2, 2], [1, 3], [2, 3]
                    ], [
                        [1, 2], [1, 3], [2, 3], [3, 3]
                    ], [
                        [1, 1], [2, 1], [1, 2], [1, 3]
                    ], [
                        [1, 2], [2, 2], [3, 2], [3, 3]
                    ]
                ],
                color: '#0070c0'
            }, {
                //L
                shapes: [
                    [
                        [1, 1], [1, 2], [1, 3], [2, 3]
                    ], [
                        [1, 2], [2, 2], [3, 2], [1, 3]
                    ], [
                        [1, 1], [2, 1], [2, 2], [2, 3]
                    ], [
                        [3, 2], [1, 3], [2, 3], [3, 3]
                    ],
                ],
                color: '#ffc000'
            }, {
                //T
                shapes: [
                    [
                        [2, 2], [1, 3], [2, 3], [3, 3]
                    ], [
                        [2, 1], [1, 2], [2, 2], [2, 3]
                    ], [
                        [1, 2], [2, 2], [3, 2], [2, 3]
                    ], [
                        [2, 2], [2, 1], [3, 2], [2, 3]
                    ],
                ],
                color: '#7030a0'
            }
        ]

        class Block {
            constructor(color) {
                this.color = color
            }
        }

        class Mino {
            constructor(minoData, x, y, field) {
                this.minoData = minoData
                this.rotate = 0
                this.x = x
                this.y = y
                this.field = field
                this.isOnGrounded = false
            }
            draw() {
                //ミノ落下予測
                const altitude = blockPerHeight - this.y - Math.max(...this.minoData.shapes[this.rotate].map(i => i[1]))
                for (let checkingHeight = 0; checkingHeight <= altitude; checkingHeight++) {
                    if (!(this.isMovable(0, checkingHeight))) {
                        this.minoData.shapes[this.rotate].forEach(shapeData => {
                            const coordinateX = this.field.canvasX + blockSize * (this.x + shapeData[0])
                            const coordinateY = this.field.canvasY + blockSize * (this.y + checkingHeight + shapeData[1] - 1)
                            ctx.fillStyle = this.minoData.color + '50'
                            ctx.fillRect(coordinateX, coordinateY, blockSize, blockSize)
                            ctx.strokeStyle = this.minoData.color + 'ef'
                            ctx.strokeRect(coordinateX, coordinateY, blockSize, blockSize)
                        })
                        break;
                    }
                }
                //ミノ実体
                this.minoData.shapes[this.rotate].forEach(shapeData => {
                    const coordinateX = this.field.canvasX + blockSize * (this.x + shapeData[0])
                    const coordinateY = this.field.canvasY + blockSize * (this.y + shapeData[1])
                    ctx.fillStyle = this.minoData.color
                    ctx.fillRect(coordinateX, coordinateY, blockSize, blockSize)
                    ctx.strokeStyle = 'white'
                    ctx.strokeRect(coordinateX, coordinateY, blockSize, blockSize)
                })
            }
            fall() {
                const altitude = blockPerHeight - this.y - Math.max(...this.minoData.shapes[this.rotate].map(i => i[1]))
                for (let checkingHeight = 0; checkingHeight <= altitude; checkingHeight++) {
                    if (!(this.isMovable(0, checkingHeight))) {
                        this.move(0, checkingHeight - 1)
                        this.copyToField()
                        this.isOnGrounded = true
                        break;
                    }
                }
            }
            isMovable(offsetX, offsetY, rotation = 0) {
                return this.minoData.shapes[(this.rotate + rotation) % 4].every(shapeData => {
                    const x = this.x + offsetX + shapeData[0]
                    const y = this.y + offsetY + shapeData[1]
                    return !Boolean(this.field.getTile(x, y))
                })
            }
            move(offsetX, offsetY) {
                if (!(this.isMovable(offsetX, offsetY))) return
                this.x += offsetX
                this.y += offsetY
            }
            rotation(offsetDegree) {
                if (this.isMovable(0, 0, offsetDegree)) {
                    this.rotate = (offsetDegree + this.rotate) % 4
                }
            }
            checkOnGround() {
                const isOnGrounded = this.minoData.shapes[this.rotate].some(shapeData => {
                    const x = this.x + shapeData[0]
                    const y = (this.y + 1) + shapeData[1]
                    return Boolean(this.field.getTile(x, y))
                })
                return isOnGrounded
            }
            copyToField() {
                this.minoData.shapes[this.rotate].forEach(shapeData => {
                    const x = this.x + shapeData[0]
                    const y = this.y + shapeData[1]
                    this.field.setTile(new Block(this.minoData.color), x, y)
                })
            }
        }

        class Field {
            constructor(canvasX = 0, canvasY = 0) {
                this.field = [...Array(blockPerHeight)].map(() => Array(blockPerWidth).fill(0));
                this.canvasX = canvasX
                this.canvasY = canvasY
            }
            getTile(x, y) {
                if (0 > x || x >= blockPerWidth || y >= blockPerHeight) return 1
                if (0 > y) return 0
                return this.field[y][x]
            }
            setTile(block, x, y) {
                if (0 > x || x >= blockPerWidth || 0 > y || y >= blockPerHeight) return
                this.field[y][x] = block
            }
            findFilledLine() {
                const lines = []
                this.field.forEach((fieldLine, y) => {
                    if (fieldLine.every(tile => tile !== 0))
                        lines.push(y)
                })
                return lines
            }
            clearLine(y) {
                this.field.splice(y, 1)
                this.field.unshift([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
            }
            draw() {
                this.field.forEach((line, y) => {
                    line.forEach((tile, x) => {
                        const coordinateX = this.canvasX + blockSize * x
                        const coordinateY = this.canvasY + blockSize * y
                        if (!tile) {
                            ctx.strokeStyle = '#2f4f4f'
                            return ctx.strokeRect(coordinateX, coordinateY, blockSize, blockSize)
                        }
                        ctx.fillStyle = tile.color
                        ctx.fillRect(coordinateX, coordinateY, blockSize, blockSize)
                        ctx.strokeStyle = 'black'
                        ctx.strokeRect(coordinateX, coordinateY, blockSize, blockSize)
                    })
                })

            }
        }

        class Game {
            constructor() {
                this.field = new Field(5 * blockSize)
                this.arriveMinos = [...new Array(minoShape.length)].map((_, i) => i)
                this.controllingMino = this.createMino()
                this.next = [...new Array(6)].map(() => this.createMino())
                this.lineCleared = 0
                this.draw()
            }
            controls = {
                left: () => {
                    this.controllingMino.move(-1, 0)
                    this.draw()
                },
                right: () => {
                    this.controllingMino.move(1, 0)
                    this.draw()
                },
                down: () => {
                    this.controllingMino.move(0, 1)
                    this.draw()
                    if (this.controllingMino.checkOnGround()) {
                        this.controllingMino.copyToField()
                        this.controllingMino = this.popMino()
                    }
                },
                fall: () => {
                    this.controllingMino.fall()
                    this.controllingMino = this.popMino()
                    this.clearLine()
                    this.draw()
                },
                rotationRight: () => {
                    this.controllingMino.rotation(1)
                    this.draw()
                    this.controllingMino.isOnGrounded = false
                },
                rotationLeft: () => {
                    this.controllingMino.rotation(3)
                    this.draw()
                    this.controllingMino.isOnGrounded = false
                },
                hold: () => {
                    this.holdExchange()
                    this.draw()
                }
            }
            createMino() {
                if (this.arriveMinos.length === 1) {
                    this.arriveMinos = [...new Array(minoShape.length)].map((_, i) => i)
                }
                const index = Math.floor(Math.random() * this.arriveMinos.length)
                const poppedIndex = this.arriveMinos[index]
                this.arriveMinos.splice(index, 1)
                return new Mino(minoShape[poppedIndex], minoStartPositionX, minoStartPositionY, this.field)
            }
            popMino() {
                this.next.push(this.createMino())
                return this.next.shift()
            }
            holdExchange() {
                const holdingMino = this.holdingMino ?? this.popMino()
                const controllingMino = this.controllingMino
                this.controllingMino = holdingMino
                this.holdingMino = controllingMino
                this.controllingMino.x = minoStartPositionX
                this.controllingMino.y = minoStartPositionY
            }
            draw() {
                ctx.clearRect(0, 0, displayWidth, displayHeight)
                this.field.draw()
                this.controllingMino.draw()
                ctx.fillStyle = 'white'
                ctx.font = `15pt pixelM`;
                ctx.fillText('Hold', blockSize, 15);
                if (this.holdingMino) {
                    this.holdingMino.minoData.shapes[this.holdingMino.rotate].forEach(shapeData => {
                        const coordinateX = blockSize * shapeData[0]
                        const coordinateY = blockSize + blockSize * shapeData[1]
                        ctx.fillStyle = this.holdingMino.minoData.color
                        ctx.fillRect(coordinateX, coordinateY, blockSize, blockSize)
                        ctx.strokeStyle = 'white'
                        ctx.strokeRect(coordinateX, coordinateY, blockSize, blockSize)
                    })
                }
                ctx.fillStyle = 'white'
                ctx.font = `15pt pixelM`;
                ctx.fillText('Next', ((6 + blockPerWidth) * blockSize), 15)
                this.next.forEach((mino, i) => {
                    const displayBlockSize = blockSize / 2
                    mino.minoData.shapes[0].forEach(shapeData => {
                        const coordinateX = ((6 + blockPerWidth) * blockSize) + (shapeData[0] * displayBlockSize)
                        const coordinateY = blockSize + (i * displayBlockSize) + (i * 4 * displayBlockSize) + (displayBlockSize * shapeData[1])
                        ctx.fillStyle = mino.minoData.color
                        ctx.fillRect(coordinateX, coordinateY, displayBlockSize, displayBlockSize)
                        ctx.strokeStyle = 'black'
                        ctx.strokeRect(coordinateX, coordinateY, displayBlockSize, displayBlockSize)
                    })
                })
                ctx.fillStyle = 'white'
                ctx.font = `15pt pixelM`;
                ctx.fillText(`Line ${this.lineCleared}`, ((6 + blockPerWidth) * blockSize), (this.next.length * 5 * blockSize / 2) + blockSize * 2)
            }
            clearLine() {
                const lines = this.field.findFilledLine()
                lines.forEach(line => {
                    this.field.clearLine(line)
                })
                this.lineCleared += lines.length
            }
            tick() {
                const isMinoGrounded = this.controllingMino.checkOnGround()
                if (this.controllingMino.isOnGrounded && isMinoGrounded) {
                    this.controllingMino.copyToField()
                    this.controllingMino = this.popMino()
                }
                if (isMinoGrounded) {
                    this.controllingMino.isOnGrounded = true
                }
                this.controllingMino.isOnGrounded = true
                this.controllingMino.move(0, 1)
                this.draw()
                this.clearLine()
            }
        }

        const gameMain = new Game()

        const drawLoop = () => {
            gameMain.tick()
        }

        const timer = setInterval(drawLoop, 650)

        const keyDownHandler = e => {
            console.log(e.key)
            switch (true) {
                case e.key === 'Escape':
                    close()
                    break;
                case e.key === 'ArrowRight' || e.key === 'd':
                    e.preventDefault()
                    gameMain.controls.right()
                    break;
                case e.key === 'ArrowLeft' || e.key === 'a':
                    e.preventDefault()
                    gameMain.controls.left()
                    break;
                case e.key === 'ArrowUp' || e.key === 'w' || e.key === 'q':
                    e.preventDefault()
                    gameMain.controls.rotationRight()
                    break;
                case e.key === 'e':
                    gameMain.controls.rotationLeft()
                    break;
                case e.key === 'x':
                    gameMain.controls.fall()
                    break;
                case e.key === 'r':
                    gameMain.controls.hold()
                    break;
                case e.key === 'ArrowDown' || e.key === 's':
                    gameMain.controls.down()
                    break;
                default:
                    break;
            }
        }

        document.body.addEventListener('keydown', keyDownHandler)

        const gamepadHandler = (e) => {
            const buttonPressed = {
                fall: 0,
                left: 0,
                right: 0,
                down: 0,
                rotateRight: 0,
                rotateLeft: 0,
                hold: 0,
            }
            const loop = () => {
                const gamepad = navigator.getGamepads()[0];

                if (gamepad.buttons[0].pressed || gamepad.buttons[1].pressed) {
                    if (!buttonPressed.fall) {
                        buttonPressed.fall = performance.now()
                        gameMain.controls.fall()
                        gamepad.vibrationActuator?.playEffect?.("dual-rumble", {
                            startDelay: 0,
                            duration: 50,
                            weakMagnitude: 0.4,
                            strongMagnitude: 0.1,
                        });
                    }
                } else {
                    buttonPressed.fall = 0
                }

                if (gamepad.buttons[14].pressed) {
                    if (performance.now() - buttonPressed.left > 100) {
                        buttonPressed.left = performance.now()
                        gameMain.controls.left()
                    }
                } else {
                    buttonPressed.left = 0
                }

                if (gamepad.buttons[15].pressed) {
                    if (performance.now() - buttonPressed.right > 100) {
                        buttonPressed.right = performance.now()
                        gameMain.controls.right()
                    }
                } else {
                    buttonPressed.right = 0
                }

                if (gamepad.buttons[12].pressed || gamepad.buttons[7].pressed) {
                    if (performance.now() - buttonPressed.rotateRight > 200) {
                        buttonPressed.rotateRight = performance.now()
                        gameMain.controls.rotationRight()
                    }
                } else {
                    buttonPressed.rotateRight = 0
                }

                if (gamepad.buttons[6].pressed) {
                    if (performance.now() - buttonPressed.rotateLeft > 200) {
                        buttonPressed.rotateLeft = performance.now()
                        gameMain.controls.rotationLeft()
                    }
                } else {
                    buttonPressed.rotateLeft = 0
                }

                if (gamepad.buttons[13].pressed) {
                    if (performance.now() - buttonPressed.down > 50) {
                        buttonPressed.down = performance.now()
                        gameMain.controls.down()
                    }
                } else {
                    buttonPressed.down = 0
                }

                if (gamepad.buttons[3].pressed || gamepad.buttons[2].pressed) {
                    if (performance.now() - buttonPressed.hold > 500) {
                        buttonPressed.hold = performance.now()
                        gameMain.controls.hold()
                    }
                } else {
                    buttonPressed.hold = 0
                }

                if (gamepad.buttons[8].pressed) {
                    close()
                }
                requestAnimationFrame(loop)
            }
            requestAnimationFrame(loop)
        }

        window.addEventListener("gamepadconnected", gamepadHandler);

        if (navigator.getGamepads()[0]) {
            gamepadHandler()
        }

        wrapper.appendChild(mainCanvas)
    })
}